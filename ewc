#!/usr/bin/python3

import sys
import os
import time
import subprocess
import collections
from ast import literal_eval

# FOR EPR ONLY, REMOVE THIS.
import tkinter as tk
import tkinter.filedialog as tfiles

class def_vars(object):
	""" a class with all the variables """
	valid_flags     = ['v', 'f', 'file', 'hell', 'R', 'w', 'W', 'c', 'b', 'h', 'E'] # the priority in whhellich flags are interpreted.
	double_flags    = ['R', 'v', 'E']      # flags followed by ONE argument
	multi_flags     = ['f']                # flags that can have multiple arguments (until the next flag)
	necessary_flags = ['f/file/hell']           # flags that have to be given
	replace         = ['\n', '\t']         # replace these chars in normalize()
	count_chars_exclude = [' ']            # do not count these chars in count_chars()
	valid_string_flags  = ['file', 'words', 'bytes', 'chars', 'max-rows', 'help', 'hell', 'graphical']
	double_string_flags = ['file', 'max-rows']
	multi_string_flags = ['file']

	# only for help, version etc
	special_flags = ['h']
	special_string_flags = ['help', 'hell']
	max_rows = -1
	verbose_level = 2

class word_count(def_vars):
	""" in this class all the functions are stored which interact with the file """
	def load_file(self, filepath):
		file_formats = ['ascii', 'utf-8', 'utf-16', 'utf-32']
		for fformat in file_formats:
			try:
				f = open(filepath, 'r', encoding=fformat)
			except Exception as e:
				self.write_out("[ERR]: Could not open file.\n", 0)
				return
			try:
				self.write_out("[INF]: Trying " + fformat + "...", 2)
				self.filecontent = f.read()
			except Exception as e:
				self.write_out("failed!\n", 2)
				continue

			self.write_out("success!\n", 2)
			break

		f.close()

	def normalize(self, text):
		for c in self.replace:
			text = text.replace(c, " ")
		return text

	def count_words(self, text):
		word_count = 0
		for w in self.normalize(text).split(" "):
			if len(w) == 0:
				continue
			else:
				word_count += 1
		
		return word_count
		
	def count_chars(self, text):
		char_counter = 0
		for c in text:
			if c not in self.count_chars_exclude:
				char_counter += 1

		return char_counter

	def count_bytes(self, text):
		return len(text)

	def stat_words(self, text):
		word_stat = {}
		for w in self.normalize(text).split(" "):
			if word_stat.get(w) is None:
				word_stat[w] = 1
			else:
				word_stat[w] += 1

		return word_stat
	
	def getcontent(self):
		return self.filecontent

class cmd_word_count(word_count):
	def parse(self, args):
		self.flags = collections.OrderedDict()
		double_list = []
		multi_list  = []
		for arg in args:
			if len(multi_list) != 0:
				if "-" in arg:
					del multi_list[0]
				else:
					self.flags[multi_list[0]].append(arg)

			if len(double_list) != 0:
				if "-" in arg:
					self.write_out("[ERR]: Missing value for '" + str(double_list[0]) + "'!\n", 0)
					return 1
				self.flags[double_list[0]] = arg
				del double_list[0]
				continue

			if arg[0] == "-":
				# long flag. (e.g: --input)
				if arg[1] == "-":
					if arg[2:] not in self.valid_string_flags:
						self.write_out("[ERR]: Unrecognized flag '" + str(arg[2:]) + "'", 0)
						return 1

					if arg[2:] in self.special_string_flags:
						self.write_out(eval("self.option_" + arg[2:].replace("-", "_") + "('')"), 1)
						return 1
					print(arg[2:])
					if self.is_double_flag(arg[2:]) == True:
						self.flags[arg[2:]] = ""
						double_list.append(arg[2:])
					elif self.is_multi_flag(arg[2:]) == True:
						self.flags[arg[2:]] = []
						multi_list.append(arg[2:])
					else:
						self.flags[arg[2:]] = ""
					continue
				
				for a in arg[1:]:
					if a not in self.valid_flags:
						self.write_out("[ERR]: Unrecognized flag '" + str(a) + "'", 2)
						return 1
					
					if a in self.special_flags:
						self.write_out(eval("self.option_" + a.replace("-", "_") + "('')"), 1)
						return 1

					if self.is_double_flag(a) == True:
						self.flags[a] = ""
						double_list.append(a)
					elif self.is_multi_flag(a) == True:
						self.flags[a] = []
						multi_list.append(a)
					else:
						self.flags[a] = ""
					continue
				continue
		# check if an argument:
		for f in self.double_flags:
			if self.flags.get(f) is not None and len(self.flags.get(f)) == 0:
				self.write_out("[ERR]: Not all flags got values!", 0)
				self.write_out("[>>>]: " + str(double_list) + str(multi_list), 0)
				return 1

		if len(double_list) != 0 and len(multi_list) != 0:
			self.write_out("[ERR]: Not all flags got values!", 0)
			self.write_out("[>>>]: " + str(double_list) + str(multi_list), 0)
			return 1

		return 0
	
	# check if a flag requires an argument.
	def is_double_flag(self, flag):
		if flag in self.double_flags:
			return True
		
		if flag in self.double_string_flags:
			return True

		return False

	# check if a flag can have multiple arguments.
	def is_multi_flag(self, flag):
		if flag in self.multi_flags:
			return True

		if flag in self.multi_string_flags:
			return True

		return False

	def eval_flags(self, flags):
		for n in self.necessary_flags:
			flag_included = False
			for s in n.split("/"):
				if not flags.get(s) is None:
					flag_included = True
					break

			if flag_included == False:
				self.write_out("[ERR]: Missing essential flag!", 0)
				self.write_out("[>>>]: " + n + " not found.", 0)
				return

		#TODO: dont make dependent on 'f'
		while (len(flags.get('file')) > 0) if (flags.get('f') is None) else (len(flags.get('f')) > 0):
			for k in self.flags:
#				if flags.get(k) == "":
#					print(k + ": " + "--")
#				else:
#					print(k  + ": " + flags.get(k))
				self.write_out(eval("self.option_" + k.replace("-", "_") + "(\"" + str(flags.get(k)) + "\")"), 1)
			print("")
			del flags['f'][0]

	# === All the options in functions ===
	def option_file(self, args):
		return self.option_f("\"" + args + "\"")

	def option_f(self, args):
		args = literal_eval(args)
		self.load_file(args[0])
		self.write_out("[INF]: Loaded '" + args[0] + "'.", 1)
		return ""

	def option_max_rows(self, args):
		return self.option_R(args)

	def option_R(self, args):
		for c in args:
			if ord(c) <= ord('9') and ord(c) >= ord('0'):
				pass
			else:
				self.write_out("[ERR]: 'R' expects an interger.", 2)
				return ""

		self.max_rows = int(args)
		return "Max Rows: " + str(args) + "\n"

	def option_words(self, args):
		return self.option_w(args)

	def option_w(self, args):
		nwords = self.count_words(self.getcontent())
		return "Words: " + str(nwords) + "\n"

	def option_W(self, args):
		#TODO: Add pretty tables.
		statwords = self.stat_words(self.getcontent())
#		return "Word Statistics:\n " + str(statwords) + "\n"

		longest_key_len = 0
		longest_val_len = 0
		# detect longest key
		for k in statwords.keys():
			if len(str(k)) > longest_key_len:
				longest_key_len = len(str(k))

			if len(str(statwords.get(k))) > longest_val_len:
				longest_val_len = len(str(statwords.get(k)))
		
		return_buffer = []
		key_counter = 0
		
		if self.max_rows == 0:
			return ""
		if self.max_rows == -1:
			self.max_rows = len(statwords.keys())

		return_buffer.append("+" + ("=" * (longest_key_len + longest_val_len + 3 + 2)) + "+")

		for k in statwords.keys():
			if key_counter >= self.max_rows:
				break
			key_counter += 1
			return_buffer.append("| " + k  + (" " * (longest_key_len - len(k))) + " | " \
			+ (" " * (longest_val_len - len(str(statwords.get(k))))) \
			+ str(statwords.get(k)) + " | ")
			return_buffer.append("-" * (longest_key_len + longest_val_len + 3 + 4))
		return_buffer[len(return_buffer) - 1] = ("+" + ("=" * (longest_key_len + longest_val_len + 3 + 2)) + "+")
		return "\n".join(return_buffer) + "\n" 

	def option_bytes(self, args):
		return self.option_b(args)

	def option_b(self, args):
		nbytes = self.count_bytes(self.getcontent())
		return "Bytes: " + str(nbytes) + "\n"

	def option_chars(self, args):
		return self.option_c(args)

	def option_c(self, args):
		nchars = self.count_chars(self.getcontent())
		return "Chars: " + str(nchars) + "\n"

	def option_hell(self, args):
		self.tk_call(tfiles.askopenfilename(title="nein. einfach nein."))
		return "no."

	def option_help(self, args):
		return self.option_h(args)

	def option_h(self, args):
		f = open("./.help.txt", 'r')
		helptext = f.read()
		f.close()
		return helptext

	def option_v(self, args):
		for c in args:
			if ord(c) <= ord('9') and ord(c) >= ord('0'):
				pass
			else:
				self.write_out("[ERR]: 'v' expects an interger.", 2)
				return ""

		self.verbose_level = int(args)
		return "Verbose Level: " + str(args) + "\n"

	def tk_call(self, args):
		self.load_file(args)
		print("WORDS: " + str(self.count_words(self.getcontent())))
		print("CHARS: " + str(self.count_chars(self.getcontent())))
		print("BYTES: " + str(self.count_bytes(self.getcontent())))
		return

	def write_out(self, string, level):
		if level <= self.verbose_level:
			print(string, end="")

	def option_graphical(self, args):
		while True:
			print("\033[2J")
			print("\033[1;1H" + "[\033[41m" + str(subprocess.run(["pwd"], stdout=subprocess.PIPE).stdout)[2:-3].replace("\n", "") + "\033[0m]")
			print("\033[2;1H" + str(subprocess.run(["ls", "-cG"], stdout=subprocess.PIPE).stdout)[2:-3].replace("\\n", "\n"))
			input("==>")
		return "lel."
		

cmd = cmd_word_count()
if cmd.parse(sys.argv) == 0:
	cmd.eval_flags(cmd.flags)
